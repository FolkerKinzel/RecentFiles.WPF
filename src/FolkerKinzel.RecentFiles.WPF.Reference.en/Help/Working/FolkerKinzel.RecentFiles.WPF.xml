<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>FolkerKinzel.RecentFiles.WPF</name>
  </assembly>
  <members>
    <member name="T:FolkerKinzel.RecentFiles.WPF.Intls.ClearRecentFiles">
      <summary>
        <see cref="T:System.Windows.Input.ICommand" /> to delete the list of recently used files.</summary>
      <remarks>Initializes the <see cref="T:System.Windows.Input.ICommand" />.</remarks>
      <param name="execute">
        <see cref="T:System.Action" /> delegate that executes the <see cref="T:System.Windows.Input.ICommand" />.</param>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.ClearRecentFiles.#ctor(System.Action)">
      <summary>
        <see cref="T:System.Windows.Input.ICommand" /> to delete the list of recently used files.</summary>
      <remarks>Initializes the <see cref="T:System.Windows.Input.ICommand" />.</remarks>
      <param name="execute">
        <see cref="T:System.Action" /> delegate that executes the <see cref="T:System.Windows.Input.ICommand" />.</param>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.ClearRecentFiles.CanExecute(System.Object)">
      <summary>Method that checks whether the <see cref="T:System.Windows.Input.ICommand" /> can be executed.</summary>
      <param name="parameter">Data used by the <see cref="T:System.Windows.Input.ICommand" /> or <c>null</c>.</param>
      <returns>
        <c>true</c> if the <see cref="T:System.Windows.Input.ICommand" /> can be executed.</returns>
    </member>
    <member name="E:FolkerKinzel.RecentFiles.WPF.Intls.ClearRecentFiles.CanExecuteChanged">
      <summary>Event that is fired if the return value of 
            <see cref="M:FolkerKinzel.RecentFiles.WPF.OpenRecentFile.CanExecute(System.Object)" /> 
            has changed.</summary>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.ClearRecentFiles.Execute(System.Object)">
      <summary>Method that executes the <see cref="T:System.Windows.Input.ICommand" />.</summary>
      <param name="parameter">Data used by the <see cref="T:System.Windows.Input.ICommand" /> or <c>null</c>.</param>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.FileNameFormatter.GetReplacement">
      <summary>
            Helper method to support unit tests.
            </summary>
      <returns>The value of <see cref="F:FolkerKinzel.RecentFiles.WPF.Intls.FileNameFormatter.REPLACEMENT" />.</returns>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.IconCache.ResizeIcon(System.Drawing.Icon,System.Int32,System.Int32)">
      <summary> Resizes the icon to the specified width and height. </summary>
      <param name="icon">The icon to resize.</param>
      <param name="width">The width to resize to.</param>
      <param name="height">The height to resize to.</param>
      <returns>The resized image.</returns>
    </member>
    <member name="T:FolkerKinzel.RecentFiles.WPF.Intls.OpenRecentFile">
      <summary>
        <see cref="T:System.Windows.Input.ICommand" /> to open a file selected from the 
            <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" />.</summary>
      <remarks>Initializes the <see cref="T:System.Windows.Input.ICommand" />.</remarks>
      <param name="execute">
        <see cref="T:System.Action" /> delegate that executes the 
            <see cref="T:System.Windows.Input.ICommand" />.</param>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.OpenRecentFile.#ctor(System.Action{System.Object})">
      <summary>
        <see cref="T:System.Windows.Input.ICommand" /> to open a file selected from the 
            <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" />.</summary>
      <remarks>Initializes the <see cref="T:System.Windows.Input.ICommand" />.</remarks>
      <param name="execute">
        <see cref="T:System.Action" /> delegate that executes the 
            <see cref="T:System.Windows.Input.ICommand" />.</param>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.OpenRecentFile.CanExecute(System.Object)">
      <summary>Method that checks whether the <see cref="T:System.Windows.Input.ICommand" /> can be executed.</summary>
      <param name="parameter">Data used by the <see cref="T:System.Windows.Input.ICommand" /> or <c>null</c>.</param>
      <returns>
        <c>true</c> if the <see cref="T:System.Windows.Input.ICommand" /> can be executed.</returns>
    </member>
    <member name="E:FolkerKinzel.RecentFiles.WPF.Intls.OpenRecentFile.CanExecuteChanged">
      <summary>Event that is fired if the return value of 
            <see cref="M:FolkerKinzel.RecentFiles.WPF.Intls.OpenRecentFile.CanExecute(System.Object)" /> has changed.</summary>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.OpenRecentFile.Execute(System.Object)">
      <summary>Method that executes the <see cref="T:System.Windows.Input.ICommand" />.</summary>
      <param name="parameter">The filename selected for opening.</param>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.Intls.RecentFilesPersistence.#ctor(System.String)">
      <summary>Initializes a <see cref="T:FolkerKinzel.RecentFiles.WPF.Intls.RecentFilesPersistence" /> instance.</summary>
      <param name="persistenceDirectoryPath">Absolute path of the directory, into
            the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> is persisted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="persistenceDirectoryPath" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="persistenceDirectoryPath" /> contains at least one of the invalid
            characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" /></para>
        <para>
            - or -
            </para>
        <para>
          <paramref name="persistenceDirectoryPath" /> is not an absolute path
            </para>
        <para>
            - or -
            </para>
        <para>
          <paramref name="persistenceDirectoryPath" /> does not refer to an existing directory.
            </para>
      </exception>
    </member>
    <member name="T:FolkerKinzel.RecentFiles.WPF.IRecentFilesMenu">
      <summary>Interface that represents the public interface of the 
            <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> class.</summary>
    </member>
    <member name="E:FolkerKinzel.RecentFiles.WPF.IRecentFilesMenu.RecentFileSelected">
      <summary>Event that is fired when the user selects a file to open from the menu.</summary>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.IRecentFilesMenu.Initialize(System.Windows.Controls.MenuItem)">
      <summary>Assigns the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> the <see cref="T:System.Windows.Controls.MenuItem" /> as its submenu the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> is displayed. This method
            must be called before everyone else!</summary>
      <param name="miRecentFiles">The <see cref="T:System.Windows.Controls.MenuItem" /> as its submenu the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="miRecentFiles" /> is
            <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.IRecentFilesMenu.AddRecentFileAsync(System.String)">
      <summary>Adds <paramref name="fileName" /> to the menu if <paramref name="fileName" /> contains a filename.</summary>
      <param name="fileName">A filename to add. If <paramref name="fileName" /> is
            <c>null</c>, empty or whitespace, nothing is added.</param>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> that can be awaited.</returns>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.IRecentFilesMenu.GetMostRecentFileAsync">
      <summary>Returns the name of the most recently opened file or <c>null</c> if
            the menu is empty.</summary>
      <returns>Name of the most recently opened file or <c>null</c> if the menu is
            empty.</returns>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.IRecentFilesMenu.RemoveRecentFileAsync(System.String)">
      <summary>Removes a filename from the menu.</summary>
      <param name="fileName">The filename to remove.</param>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> that can be awaited.</returns>
    </member>
    <member name="T:FolkerKinzel.RecentFiles.WPF.RecentFileSelectedEventArgs">
      <summary>
        <see cref="T:System.EventArgs" /> for the 
            <see cref="E:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.RecentFileSelected" /> event.</summary>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFileSelectedEventArgs.#ctor(System.String)">
      <summary>Initializes a <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFileSelectedEventArgs" /> object.</summary>
      <param name="fileName">The filename of the selected file.</param>
    </member>
    <member name="P:FolkerKinzel.RecentFiles.WPF.RecentFileSelectedEventArgs.FileName">
      <summary>The selected filename.</summary>
    </member>
    <member name="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu">
      <summary>Class that adds a menu of recently used files to the WPF application.</summary>
      <remarks>
        <para>
            Add a <see cref="T:System.Windows.Controls.MenuItem" /> to your application as its sub-menu 
            <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> is to be displayed and pass this to the method 
            <see cref="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.Initialize(System.Windows.Controls.MenuItem)" /> - then the menu is ready to start.
            </para>
        <para>
            To add a filename to the menu, <see cref="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.AddRecentFileAsync(System.String)" /> has
            to be called. Do this always after opening or saving a file (e.g., in a property
            "CurrentFileName").
            </para>
        <para>
            To open a file selected from the menu, the application has to subscribe to the
            event <see cref="E:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.RecentFileSelected" />. The filename is delivered
            in the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFileSelectedEventArgs" />.
            </para>
        <para>
          <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> persists in small text files with the Naming
            convention 
            [<see cref="P:System.Environment.MachineName" />].[<see cref="P:System.Environment.UserName" />].RF.txt. 
            Note that the program name is not included. Therefore <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> 
            should be persisted in a folder that is not used by any other program.
            </para>
        <para>
            When exiting the application you should wait for all open tasks of the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> (e.g., with <see cref="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />) 
            and then call <see cref="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.Dispose" /> to release the system
            wide <see cref="T:System.Threading.Mutex" />, which is used to synchronize the persistence of the
            <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> between multiple instances of the application.
            </para>
      </remarks>
      <example>
        <para>
            Initializing the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" />:
            </para>
        <code language="cs" source="..\WpfExample\App.xaml.cs" />
        <para>
            Including a <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> into a WPF-<see cref="T:System.Windows.Window" />:
            </para>
        <code language="cs" source="..\WpfExample\MainWindow.xaml.cs" />
      </example>
    </member>
    <member name="E:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.RecentFileSelected">
      <summary>Event that is fired when the user selects a file to open from the menu.</summary>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.#ctor(System.String,System.Int32,System.String)">
      <summary>Initializes a <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" />.</summary>
      <param name="persistenceDirectoryPath">Absolute path of the directory into which the
            <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> persists. This should be a folder that
            is not used by any other program.</param>
      <param name="maxFiles">Maximum number of file names to be displayed in the menu
            (between 1 and 10).</param>
      <param name="clearListText">Text for the menu item "Clear list" or <c>null</c>
            to add the English text from the resources.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="persistenceDirectoryPath" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxFiles" />
            is less than 1 or greater than 10.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="persistenceDirectoryPath" /> contains at least one of the invalid
            characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" /></para>
        <para>
            - or -
            </para>
        <para>
          <paramref name="persistenceDirectoryPath" /> is not an absolute path
            </para>
        <para>
            - or -
            </para>
        <para>
          <paramref name="persistenceDirectoryPath" /> does not refer to an existing directory.
            </para>
      </exception>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.Initialize(System.Windows.Controls.MenuItem)">
      <summary>Assigns the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> the <see cref="T:System.Windows.Controls.MenuItem" /> as its submenu the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> is displayed. The 
            <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> is only usable after this method has been
            called.</summary>
      <param name="miRecentFiles">The <see cref="T:System.Windows.Controls.MenuItem" /> as its submenu the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" /> is displayed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="miRecentFiles" /> is
            <c>null</c>.</exception>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.AddRecentFileAsync(System.String)">
      <summary>Adds <paramref name="fileName" /> to the menu if <paramref name="fileName" /> contains a filename.</summary>
      <param name="fileName">A filename to add. If <paramref name="fileName" /> is
            <c>null</c>, empty or whitespace, nothing is added.</param>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> that can be awaited.</returns>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.RemoveRecentFileAsync(System.String)">
      <summary>Removes a filename from the <see cref="T:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu" />.</summary>
      <param name="fileName">The filename to remove.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that can be awaited.</returns>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.GetMostRecentFileAsync">
      <summary>Returns the name of the most recently opened file or <c>null</c> if
            the menu is empty.</summary>
      <returns>Name of the most recently opened file or <c>null</c> if the menu is
            empty.</returns>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.Dispose">
      <summary>Releases the resources.</summary>
      <remarks>Such a resource is the system wide <see cref="T:System.Threading.Mutex" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.TestClearRecentFiles">
      <summary>
            Helper method to unit test <see cref="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.ClearRecentFiles_Executed" />.
            </summary>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.TestOpenRecentFile(System.Object)">
      <summary>
            Helper method to unit test <see cref="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.OpenRecentFile_Executed(System.Object)" /></summary>
      <param name="fileName">The file name to open.</param>
    </member>
    <member name="M:FolkerKinzel.RecentFiles.WPF.RecentFilesMenu.GetFilesCount">
      <summary>
            Helper method to support unit tests.
            </summary>
      <returns>The number of items that are currently in the instance.</returns>
    </member>
    <member name="T:FolkerKinzel.RecentFiles.WPF.Resources.Res">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:FolkerKinzel.RecentFiles.WPF.Resources.Res.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:FolkerKinzel.RecentFiles.WPF.Resources.Res.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:FolkerKinzel.RecentFiles.WPF.Resources.Res.ClearList">
      <summary>
              Looks up a localized string similar to Clear list.
            </summary>
    </member>
    <member name="P:FolkerKinzel.RecentFiles.WPF.Resources.Res.FilePathNotFullyQualified">
      <summary>
              Looks up a localized string similar to {0} is not a fully qualified path..
            </summary>
    </member>
    <member name="P:FolkerKinzel.RecentFiles.WPF.Resources.Res.NotAnExistingDirectory">
      <summary>
              Looks up a localized string similar to {0} doesn't refer to an existing directory..
            </summary>
    </member>
    <member name="N:FolkerKinzel.RecentFiles.WPF">
      <summary>Classes, used to display a menu for the most recently used files in a WPF application.</summary>
    </member>
  </members>
</doc>